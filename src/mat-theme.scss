// I'm not sure if it's a good idea for  me to be using Angular Material at all. I just want the functionality, such as table sorting and table filtering, and also the styling of radio buttons etc. But I don't want to use Angular Material to set my colors. I'll see if Angular Material seems to be causing problems now that I start setting the colors. Eventually, I should probably remove Angular Material and either use some other module, such as ngx-datatable, or just write my own sorting and filtering logic.

@import '~@angular/material/theming';

// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
@include mat-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue.
$rp-primary: mat-palette($mat-indigo);
$rp-accent:  mat-palette($mat-pink, A200, A100, A400);

// The warn palette is optional (defaults to red).
$rp-warn:    mat-palette($mat-red);

// Create the theme object (a Sass map containing all of the palettes).
$rp-theme: mat-light-theme($rp-primary, $rp-accent, $rp-warn);

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include angular-material-theme($rp-theme);